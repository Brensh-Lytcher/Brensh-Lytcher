2024/04/22
Plan
  1. 線形回帰 (Linear Regression)の学習と実践
  2. ロジスティック回帰 (Logistic Regression)の学習と実践
  3. サポートベクターマシン (Support Vector Machines, SVM)の学習と実践

Do
  1. 最小二乗法による線形回帰
      -1つの入力変数のみを使う:単回帰モデル
      -複数個の入力変数を使う:重回帰モデル
      回帰直線(平面or超平面): y = w0 + w1*x1 + w2*x2 + ... + wn*xn
        (w0:バイアスパラメータ, w1,w2,...,wn:重みパラメータ    最小二乗法によって定まる)
      評価方法: R^2スコア
                 Σ_i=1 (yi - yi')^2
      R^2 = 1 - --------------------        (yi'がxiに対するyの予測値, μがyの平均値)
                 Σ_i=1 (yi - μ)^2
      model: sklearn.linear_model.LinearRegression()
      Parameters:
        -fit_intercept:bool, default=True
          バイアスパラメータw0の使用
        -copy_X:bool, default=True
          入力データをコピーして使用(Falseにすると、モデルを作成した後に、入力データも変わってしまう)
        -n_jobs:int, default=None
          計算に使用するジョブ数(Noneは1. -1にすると、すべてのCPUを使って計算)
        -positive:bool, default=False
          係数(パラメータw)を正数にする
          
      線形回帰モデルの過学習抑止: L1正則化(Lasso), L2正則化(Ridge回帰)
      L1正則化(Lasso)
        大量の特徴量の内の不要なものを除く(重みパラメータwiを0にする)
        E(w) = 1/2*Σ_i=1 (yi - yi')^2  + α*Σ_i=0 |wi|
        E(w)を最小にするような係数w0,w1,...,wnを求める
        model: sklearn.linear_model.Lasso()
        parameters: 
          -alpha:float, default=1.0
            E(w)のαを指定
          -fit_intercept:bool, default=True
            LinearRegressionと同じ
          -precompute:bool or array-like of shape (n_features, n_features), default=False
            グラム行列の使用(計算を高速化させる)
          -copy_X:bool, default=True
            LinearRegressionと同じ
          -max_iter:int, default=1000
            誤差を最小化する計算の繰り返し回数
          -tol:float, default=1e-4
            誤算の許容範囲(どれくらい最適化させるか)
          -warm_start:bool, default=False
            前回の解を初期値とする
          -positive:bool, default=False
            LinearRegressionと同じ
          -random_state:int, RandomState instance, default=None
            乱数シード
          -selection:{‘cyclic’, ‘random’}, default=’cyclic’
            係数の更新順序(cyclic:順番  random:ランダム)

      L2正則化(Ridge回帰)
        大きな特徴量にペナルティを与えて、重みを調整す、
        E(w) = 1/2*Σ_i=1 (yi - yi')^2  + α*Σ_i=0 wi^2
        E(w)を最小にするような係数w0,w1,...,wnを求める
        model: sklearn.linear_model.Ridge()
        parameters:
          -alpha:{float, ndarray of shape (n_targets,)}, default=1.0
          -fit_intercept:bool, default=True
          -copy_X:bool, default=True
          -max_iter:int, default=None
          -tol:float, default=1e-4
          -solver:{‘auto’, ‘svd’, ‘cholesky’, ‘lsqr’, ‘sparse_cg’, ‘sag’, ‘saga’, ‘lbfgs’}, default=’auto’
            使用する計算アルゴリズム
          -positive:bool, default=False
          -random_state:int, RandomState instance, default=None

      実践によると、線形回帰は連続な値の予測に有利なモデルであるが、離散な値の予測（予測値を四捨五入などの方法で整数にする）に不利である。今回のコンペ「Multi-Class Prediction of Obesity Risk」の目的変数はObject型であり、離散型の整数で表せるので、線形回帰の予測精度が低いが、説明変数の中に連続型のデータがあるので、説明変数の間の関係の分析に使えるかもしれない。また、他のコンペについて、説明変数に欠損値があることもあるで、その欠損値を補完することに役立つだろう。

  2. ロジスティック回帰によるクラス分類
      model: sklearn.linear_model.LogisticRegression()
      

Check
  1. 線形回帰は直線型の回帰式が得られるが、n次関数や指数関数、対数関数、三角関数などの場合もあるので、それらに対応できるようなモデルも学ぶべきだ。また、今度のコンペに線形回帰は役に立たないので、今後は連続値を予測するコンペに参加して、それを実践すべきだ。
  2. 

Action



参考文献
[1] 清水琢也、小川雄太郎: AIエンジニアを目指す人のための機械学習入門，技術評論社，p23-65
[2] scikit-learn: sklearn.linear_model.LinearRegression, https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html
[3] scikit-learn: sklearn.linear_model.Lasso, https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lasso.html
[4] scikit-learn: sklearn.linear_model.Ridge, https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html
