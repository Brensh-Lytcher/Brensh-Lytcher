日付 : 2024/06/24~28
Plan
  1. CatBoostClassifierの学習と実践
  2. ゴールの調整

Do
  1. CatBoostClassifierの学習と実践
      参考文献[1][2]を使って学習した。
      ライブラリ:
        catboost.CatBoostClassifier
      概要・特徴:
        -決定木を勾配ブースティングしたもの
        -カテゴリ特徴量を自動処理できる
        -多くの分野で使われる
        -ほかのモデルと同じ精度に達するために必要なデータ数が少ない
        -記述形式データに対応できる
        -大規模なパラメータ調整の必要がない
        -過学習しにくい
      関連モデル:
        catboost.CatBoost
        catboost.CatBoostRegressor
      パラメータ:
        共通パラメータ:
          -task_type: 'CPU' or 'GPU'
            CPUとGPUのどれを使うかを指定
          -loss_function: string, default='Logloss' or 'MultiClass'
            誤差評価のメトリクス
            'Logloss':2クラス分類の場合
            'MultiClass':多クラス分類の場合
            その他:'CrossEntropy', 'Precision', 'Recall', 'F', 'F1', 'BalancedAccuracy', 'BalancedErrorRate', 'MCC', 'Accuracy', 'CtrFactor', 'AUC', 'QueryAUC', 'PRAUC', 'NormalizedGini', 'BrierScore', 'HingeLoss', 'HammingLoss', 'ZeroOneLoss', 'Kappa', 'WKappa', 'LogLikelihoodOfPrediction'
          -custom_metric: string, default=None
            メトリクス値（メトリクスの情報を調べるために使われる）
          -eval_metric: string, default=auto
            過学習評価のメトリクス
          -iterations: int, default=1000
            決定木の最大数
          -learning_rate: float, default=auto
            学習率
          -random_seed: int, default=None
            乱数シード
          -l2_leaf_reg: float, default=3.0
            L2正則化係数
          -bootstrap_type: string, default=auto
            オブジェクトの重みの設定法
            'Bayesian', 'Bernoulli', 'MVS', 'Poisson'(supported for GPU only)
          -bagging_temperature: float>=0, default=1.0
            ベイジアンブートストラップの設定。bootstrap='Bayesian'のときに使う。
          -subsamle: float, default=auto
            バギングの係数sample rateの設定。bootstrap='Poisson', 'Bernoulli', 'MVS'のときに使う。
          -sampling_frequency: 'PerTree' or 'PerTreeLevel', default='PerTreeLevel'
            決定木の重み調整頻度(CPUのみ)
          -sampling_unit: 'Object' or 'Group', default='Object'
            サンプリング方法
          -mvs_reg: float, default=auto
            bootstrap_type='MVS'のときに使う。具体的なものはわからない。(CPUのみ)
          -random_strength: float, default=1
            ランダム性の強度。過学習防止対策。(CPUのみ)
          -best_model_min_trees: int, default=None
            決定木数の最小値
          -depth: int, default=6
            木の深さ
            CPU: int<=16
            GPU: int<=8
          -grow_policy: 'SymmetricTree', 'Depthwise', 'Lossguide', default='SymmetricTree'
            木構造の生成方法
          -min_data_in_leaf: int, default=1
            葉の最小データ数
          -max_leaves: int, default=31
            葉の最大数
          -ignore_features: default=None
            使用しない特徴量のインデクス
          -one_hot_max_size: int, default=auto
            one_hotエンコーディングで、カテゴリ特徴量を与えられたパラメータ値以下の値に変換する
          -has_time: bool, default=False
            不明
          -rsm: float(0, 1], default=1
            各分割で特徴量を使う割合（残りがランダム的に決まる）
          -nan_mode: 'Forbidden', 'Min', 'Max', default='Min'
            欠損データの整理
            Forbidden: 欠損データを捨てる
            Min: 最小値に変える
            Max: 最大値に変える
          -input_borders: default=None
            不明
          -output_borders: default=None
            不明
          -fold_permutation_block: int, default=1
            データセットのブロック化のサイズ。小さいほど計算時間が長くなる。大きい値が精度低下につながる。
          -leaf_estimation_method: 'Newton', 'Gradient', 'Exact', default=auto
            葉の分割境界値の計算方法
          -leaf_estimation_iterations: int, default=None
            葉の分割境界値の計算ステップ数
          -leaf_estimation_backtracking: 'No', 'AnyImprovement', 'Armijo', default='AnyImprovement'
            不明
            ArmijoがGPUのみに使える
          -fold_len_multiplier: float>1, default=2
            不明
          -approx_on_full_history: bool, default=False
            過去の訓練結果の応用(CPUのみ)
          -class_weights: list, dict, default=None
            各（分類）クラスの重み
          -class_names: list, strings, default=None
            分類クラス名指定
          -auto_class_weights: None, 'Balanced', 'SqrtBalanced', default=None
            class_weightsの自動設定方法
          -scale_pos_weight: float, default=1.0
            2クラス分類の場合、1のクラスの重み
            多クラス分類の場合、1以上のクラスの重み
          -boosting_type: 'Ordered', 'Plain', default=auto
            ブースティングの手法
          -boost_from_average: bool, default=auto
            誤差関数の初期化。詳しくは不明。
          -langevin: bool, default=False
            Stochastic Gradient Langevin Boostingの使用。(CPUのみ)
          -diffusion_temperature: float>=0, default=10000
            Stochastic Gradient Langevin Boostingの係数diffusion temperature。(CPUのみ)
          -posterior_sampling: bool, default=False
            不明(CPUのみ)
          -allow_const_label: bool, default=False
            不明
          -score_function: 'Cosine', 'L2', 'NewtonCosine', 'NewtonL2', default='Cosine'
            次の分割を決めるための値（判別スコア）の種類
          -monotone_constraints: '1', '0', '-1', list, default=None
            数値型特徴量に単調制限をかける
            '1':単調増加
            '-1':単調減少
            '0':制限なし
          -feature_weights: list, dict, default=[1,1,...,1]
            決定木の枝において、分割を決定するときの各特徴量の重み(CPUのみ)
          -first_feature_use_penalties: list, dict, default=[0,0,...,0]
            モデルで初めて使われる特徴量にペナルティを与える。(評価関数に使う。CPUのみ)
          -fixed_binary_splits: list, default=None
            バイナリデータのうち、決定木の先端に置くものを指定する。(GPUのみ)
          -penalties_coefficient: float, default=1
            全ペナルティに共通の係数(CPUのみ)
          -per_object_feature_penalties: list, dict, default=[0,0,...,0]
            各特徴量のペナルティ（評価関数に使う。CPUのみ)
          -model_shrink_rate: float(0, 1], default=auto
            モデルの収縮率。モデルの各反復計算の係数を計算するもの(CPUのみ)
          -model_shrink_mode: 'Constant', 'Decreasing', default='Constant'
            モデルの各反復計算の係数の計算方法。(CPUのみ)
          -X: list
            訓練データ
          -y: list
            目的変数データ
          -cat_features: list, default=None
            カテゴリデータの列インデクス
          -text_features: list, default=None
            テキストデータの列インデクス
          -embedding_features: list, default=None
            埋め込みデータの列インデクス(意味が分からない)
          -sample_weight: list, default=None
            入力データの各オブジェクトの重み
          -baseline: list, default=None
            入力オブジェクトの数式値の配列
          -use_best_model: bool, default=True
            意味不明
          -eval_set:
            検証データの使用
          -verbose: bool, int, default=1
            モデル訓練過程の詳細の出力
          -logging_level: 'Silent', 'Verbose', 'Info', 'Debug', default=None
            モデル訓練過程をどれくらい出力するか
          -plot: bool, default=False
            モデル訓練過程で、メトリック値、経過時間など特定の情報の出力
          -plot_file: file_name, default=None
            モデル訓練過程をファイルに出力する
          -early_stopping_rounds: int, default=False
            訓練の早期停止(過学習防止)
      CatBoostClassifierにはほかのパラメータもあるが、あまりにも多すぎて、すべてのパラメータを学習すると、作業が進まなくなってしまうので、一部のパラメータに集中して実践しようと思った。



Check


Action


参考文献
  [1] Prashant Banerjee: CatBoost Classifier in Python, https://www.kaggle.com/code/prashant111/catboost-classifier-in-python/notebook, Accessed 2024/06/24
  [2] CatBoost: https://catboost.ai/en/docs/, Accessed 2024/06/24
